他社利用可能とするよう､ログイン認証機能の提供（社内VPN接続などの前提､外部インターネット公開しない）AWS_Cognito利用想定

### 1. 需求定义

- **ユーザーが社内ネットワーク（例えば、VPN）を通じてのみアプリケーションにアクセスできるようにする。**
- **AWS Cognito を使用して、認証機能を提供する。**

### 2. 環境設定

#### 2.1 AWS Cognito の設定

1. **ユーザープールを作成する**
   - AWS マネジメントコンソールにログインする。
   - **Cognito** サービスに移動する。
   - **ユーザープール** を選択し、**ユーザープールの作成** をクリックする。
   - ユーザープールの属性（例：登録フィールド、パスワードポリシー、二要素認証など）を設定する。
   - ユーザープール ID とアプリクライアント ID を保存する。

2. **アプリケーションクライアントを設定する**
   - アプリケーションクライアントを設定し、クライアント ID とクライアントシークレットを生成する。

#### 2.2 VPN の設定

1. **社内 VPN サーバーの設定**
   - 社内ネットワークの VPN サーバーを設定し、ユーザーが VPN を通じて社内ネットワークに接続できるようにする。
   - VPN 設定を確認し、ユーザーが内部リソースにアクセスできるが、外部インターネットには直接アクセスできないようにする。

2. **ネットワークセキュリティの設定**
   - VPN サーバーの設定で、内部ネットワークへのアクセスのみを許可する。
   - アプリケーションへのアクセスを制限するために、ネットワークセキュリティグループやネットワーク ACL を設定する。

### 3. アプリケーション設定

#### 3.1 バックエンドサービス

以下は、C# と AWS SDK for .NET を使用してユーザー認証を行うためのコード例です。

**NuGet パッケージのインストール**

```sh
Install-Package AWSSDK.CognitoIdentityProvider
```

**ユーザー認証の C# コード例**

```csharp
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Amazon.CognitoIdentityProvider;
using Amazon.CognitoIdentityProvider.Model;

class Program
{
    private static readonly string userPoolId = "YOUR_USER_POOL_ID"; // ユーザープール ID
    private static readonly string clientId = "YOUR_CLIENT_ID";       // アプリクライアント ID
    private static readonly string region = "YOUR_AWS_REGION";       // AWS リージョン (例: us-west-2)

    static async Task Main(string[] args)
    {
        var username = "testuser"; // テストユーザー名
        var password = "testpassword"; // テストパスワード

        var provider = new AmazonCognitoIdentityProviderClient(Amazon.RegionEndpoint.GetBySystemName(region));

        var authRequest = new AdminInitiateAuthRequest
        {
            UserPoolId = userPoolId,
            ClientId = clientId,
            AuthFlow = AuthFlowType.ADMIN_NO_SRP_AUTH, // SRP を使わない認証フロー
            AuthParameters = new Dictionary<string, string>
            {
                { "USERNAME", username },
                { "PASSWORD", password }
            }
        };

        try
        {
            var authResponse = await provider.AdminInitiateAuthAsync(authRequest);

            Console.WriteLine("認証成功！");
            Console.WriteLine("ID トークン: " + authResponse.AuthenticationResult.IdToken);
            Console.WriteLine("アクセストークン: " + authResponse.AuthenticationResult.AccessToken);
            Console.WriteLine("リフレッシュトークン: " + authResponse.AuthenticationResult.RefreshToken);
        }
        catch (Exception ex)
        {
            Console.WriteLine("認証中にエラーが発生しました: " + ex.Message);
        }
    }
}
```

#### 3.2 フロントエンドアプリケーション

ASP.NET Core で AWS Cognito を統合するための設定の例です。

**NuGet パッケージのインストール**

```sh
Install-Package Amazon.CognitoIdentityProvider
Install-Package Microsoft.AspNetCore.Authentication.Cookies
```

**ASP.NET Core アプリケーションの設定**

```csharp
public void ConfigureServices(IServiceCollection services)
{
    services.AddAuthentication(options =>
    {
        options.DefaultAuthenticateScheme = CookieAuthenticationDefaults.AuthenticationScheme;
        options.DefaultSignInScheme = CookieAuthenticationDefaults.AuthenticationScheme;
        options.DefaultChallengeScheme = CookieAuthenticationDefaults.AuthenticationScheme;
    })
    .AddCookie(options =>
    {
        options.LoginPath = "/Account/Login";  // ログインパス
        options.LogoutPath = "/Account/Logout"; // ログアウトパス
    });

    services.AddControllersWithViews();
}

public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
{
    if (env.IsDevelopment())
    {
        app.UseDeveloperExceptionPage();
    }
    else
    {
        app.UseExceptionHandler("/Home/Error");
        app.UseHsts();
    }

    app.UseHttpsRedirection();
    app.UseStaticFiles();

    app.UseRouting();

    app.UseAuthentication(); // 認証ミドルウェアの追加
    app.UseAuthorization();  // 認可ミドルウェアの追加

    app.UseEndpoints(endpoints =>
    {
        endpoints.MapControllerRoute(
            name: "default",
            pattern: "{controller=Home}/{action=Index}/{id?}");
    });
}
```

**AccountController の例**

```csharp
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;
using Amazon.CognitoIdentityProvider;
using Amazon.CognitoIdentityProvider.Model;

public class AccountController : Controller
{
    private readonly string userPoolId = "YOUR_USER_POOL_ID"; // ユーザープール ID
    private readonly string clientId = "YOUR_CLIENT_ID";       // アプリクライアント ID
    private readonly string region = "YOUR_AWS_REGION";       // AWS リージョン (例: us-west-2)
    private readonly AmazonCognitoIdentityProviderClient _provider;

    public AccountController()
    {
        _provider = new AmazonCognitoIdentityProviderClient(Amazon.RegionEndpoint.GetBySystemName(region));
    }

    [HttpPost]
    public async Task<IActionResult> Login(string username, string password)
    {
        var authRequest = new AdminInitiateAuthRequest
        {
            UserPoolId = userPoolId,
            ClientId = clientId,
            AuthFlow = AuthFlowType.ADMIN_NO_SRP_AUTH, // SRP を使わない認証フロー
            AuthParameters = new Dictionary<string, string>
            {
                { "USERNAME", username },
                { "PASSWORD", password }
            }
        };

        try
        {
            var authResponse = await _provider.AdminInitiateAuthAsync(authRequest);
            // トークンを保存して認証クッキーを設定する
            return RedirectToAction("Index", "Home");
        }
        catch (Exception ex)
        {
            // 認証失敗の処理
            return View("Login", new { Error = ex.Message });
        }
    }
}
```

### 4. 認証フロー

ユーザーがアプリケーションにアクセスする際に、社内ネットワーク経由でのみアクセスできるようにするためには、サーバー側で IP アドレスのフィルタリングを行います。VPN ネットワークからのアクセスのみを許可し、外部からのアクセスを制限します。

### 5. セキュリティとコンプライアンス

- **ネットワークセキュリティ**：AWS Cognito ユーザープールとバックエンドサービスが VPN 接続をサポートするように設定します。
- **データ保護**：HTTPS を使用してデータの暗号化を行い、データがネットワーク上で安全に転送されるようにします。
- **権限設定**：AWS Cognito とバックエンドサービスの権限を適切に設定し、データの安全な保存と処理を確保します。

このフローに従って、AWS Cognito を使用したユーザー認証と社内ネットワーク経由でのアクセス制限を実現できます。
